<?php ?>

<h1>ООП у РНР</h1>
<p>
	У РНР є підтримка ООП. Особливість схожа на JS - класи задають, але 
	не обмежують об'єкти, тобто їх вміст може змінюватись під час роботи.
	Визначальна відмінність полягає у тому, що РНР здатна визначати
	наявність будь-яких елементів (класів, методів, змінних, тощо) та
	звертатись до них за іменем, яке зберігається у змінній. Для покращення
	безпеки кожне таке звернення має метод-перевірку на кшталт 
	<code>class_exists</code>, <code>function_exists</code> і т.д.
</p>
<p>
	Для РНР ООП - це підтримувана парадигма, але не фундаментальна.
	Перевага ООП, яка полягає у поліморфізмі, частово вирішується тим, 
	що РНР не суворо типізований, тобто немає проблем зі збереженням
	різнотипних даних у спільних колекціях. Як правило, у стилі ООП
	реалізуються або інкапсульовані засоби (робота з зображенням чи
	з PDF документом), або засоби поліморфізму функціональності (контролери,
	інші обробники). А також шаблонізація рівня "фреймворк"
</p>
<p>
	Для оголошення методів використовується ключове слово <code>function</code>
	Модифікатори доступу присутні (private, protected, public), але також
	наявна рефлексія ("магічні" методи), які можуть надати доступ до 
	приватних полів довільного об'єкту. Якщо представлення (View) підключене
	через метод класа, то у ньому залишаються доступними усі елементи
	створені в об'єкті.
</p>
<form method='POST'><button>POST request</button></form>
<?= var_dump( $this->get_db() ) ?>
<br/>
<a class="waves-effect waves-light btn-small purple lighten-2" 
	onclick="putClick()">PUT request</a>
<a class="waves-effect waves-light btn-small teal lighten-2" 
	onclick="linkClick()">LINK request</a>
	
<script>
function putClick() {
	fetch( location.href, {
		method: 'PUT'
	}).then( r => r.text() ).then( t => document.write(t) ) ;
}
function linkClick() {
	fetch( location.href, {
		method: 'LINK'
	}).then( r => r.text() ).then( t => document.write(t) ) ;
}
</script>
